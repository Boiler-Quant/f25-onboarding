# -*- coding: utf-8 -*-
"""Trading Strategy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ICGH5bZobYvnNN5KtyjaHTbcrvtRrM3G
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import ta
from ta.momentum import RSIIndicator

pip install ta

ticker = 'BTC-USD'
data = yf.download(ticker, start='2021-01-01', end='2025-09-22')
data.dropna(inplace=True)

close_prices = data['Close']

data['rsi'] = ta.momentum.rsi(close=close_prices['BTC-USD'], window=14)

macd_indicator = ta.trend.MACD(close=close_prices['BTC-USD'], window_slow=26, window_fast=12, window_sign=9)
data['macd'] = macd_indicator.macd()
data['macd_signal'] = macd_indicator.macd_signal()


data['sma200'] = ta.trend.sma_indicator(close=close_prices['BTC-USD'], window=200)

data.dropna(inplace=True)

close_prices

# 1 for Long, 0 for Flat/No Position
data['signal'] = 0

# Entry Condition
#  (RSI < 30) OR (MACD > Signal)
long_condition = (data['rsi'] < 30) | (data['macd'] > data['macd_signal'])
data.loc[long_condition, 'signal'] = 1

# Exit Condition
#  (RSI > 70) OR (MACD < Signal)
exit_condition = (data['rsi'] > 70) | (data['macd'] < data['macd_signal'])

# Create a state machine to manage the position
position = 0
signals = []
for i in range(len(data)):
    if position == 0 and data['signal'].iloc[i] == 1:
        position = 1
    elif position == 1 and exit_condition.iloc[i]:
        position = 0
    signals.append(position)

data['position'] = signals

data['btc_returns'] = data['Close'].pct_change()
data['strategy_returns'] = data['btc_returns'] * data['position'].shift(1)

# Calculate Cumulative Returns
data['cumulative_strategy_returns'] = (1 + data['strategy_returns']).cumprod()
data['cumulative_btc_returns'] = (1 + data['btc_returns']).cumprod()
data.dropna(inplace=True)

# Identify trade entry points for plotting
entry_points = data[data['position'] != data['position'].shift(1)]
buy_signals = entry_points[entry_points['position'] == 1]
sell_signals = entry_points[entry_points['position'] == 0] # These are now exit points

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 10), sharex=True)
fig.suptitle('BTC-USD Trading Strategy Backtest (RSI + MACD)', fontsize=16)

# Panel 1: BTC Price with SMA and Trade Signals
ax1.plot(data.index, data['Close'], label='BTC Price', color='black', alpha=0.7)
ax1.plot(data.index, data['sma200'], label='200-Day SMA', color='orange', linestyle='--')
ax1.plot(buy_signals.index, data.loc[buy_signals.index]['Close'], '^', markersize=10, color='g', label='Buy Signal')
ax1.plot(sell_signals.index, data.loc[sell_signals.index]['Close'], 'v', markersize=10, color='r', label='Sell Signal')
ax1.set_ylabel('BTC Price (USD) - Log Scale')
ax1.set_title('Trading Signals on BTC Price')
ax1.set_yscale('log')
ax1.legend()
ax1.grid(True)

# Panel 2: Cumulative Returns
ax2.plot(data.index, data['cumulative_strategy_returns'], label='RSI + MACD Strategy', color='blue', linewidth=2)
ax2.plot(data.index, data['cumulative_btc_returns'], label='Buy & Hold BTC', color='orange', linestyle='--')
ax2.set_ylabel('Cumulative Returns (Log Scale)')
ax2.set_title('Strategy Cumulative Returns vs. Buy & Hold')
ax2.set_xlabel('Date')
ax2.set_yscale('log')
ax2.legend()
ax2.grid(True)

# Show the plot
plt.tight_layout(rect=[0, 0.03, 1, 0.96])
plt.show()

print("\n--- Backtest Results ---")
print(f"Final Strategy Cumulative Return: {data['cumulative_strategy_returns'].iloc[-1]:.2f}")
print(f"Final BTC Buy & Hold Return: {data['cumulative_btc_returns'].iloc[-1]:.2f}")